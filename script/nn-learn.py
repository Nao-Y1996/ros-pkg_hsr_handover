# -*- coding: utf-8 -*-
"""
Created on Thu May 16 11:29:39 2019

@author: naoyamada
"""

import numpy as np
import matplotlib.pyplot as plt
import csv
import math

#--------------------------------------------------------------------
#---------------------------入力データの作成---------------------------
    
sit = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/4NN-learn/sit.csv'
stand = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/4NN-learn/stand.csv'
cross = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/4NN-learn/cross.csv'
#２次元のcsvを読んで要素をfloatにする
def str2float(path):
    with open(path) as f:
        reader = csv.reader(f)
        data = [row for row in reader]
    for i in range(np.shape(data)[0]):
        for j in range(np.shape(data)[1]):
            data[i][j] = float(data[i][j])
    return data

sit_data = str2float(sit)
stand_data = str2float(stand)
cross_data = str2float(cross)

#データを結合
sit_data.extend(stand_data)
sit_data.extend(cross_data)
input_data = np.array(sit_data)

#標準化する
#def standardization(array):
    #ave_input = np.average(array, axis=0)
    #std_input = np.std(array, axis=0)
    #standardized = (array - ave_input) / std_input 
    #return standardized




#----------------------正解データを作成----------------
clusta_Num = 3
c0 = [0]*(clusta_Num*100)
c1 = [1]*(clusta_Num*100)
c2 = [2]*(clusta_Num*100)
c0.extend(c1)
c0.extend(c2)
correct = c0

n_data = len(correct)


#正解データをone-hot表現にする
correct_data = np.zeros((n_data,clusta_Num)) #[0,0,0]をn_data個 (n_datax3の行列)
for i in range(n_data):
    correct_data[i, correct[i]] = 1.0
    #correct_dataのi番目の要素(i番目の行)の中の
    #corcorrectrect[i]番目(0番目,1番目,2番目)の要素を1に変換する
print('correct_data --> {}'.format(np.shape(correct_data)))
#------------------------------------------------------------


#訓練データとテストデータに分割    
index = np.arange(n_data)
index_train = index[index%2 == 0] # == [0 2 4 ... ]
index_test = index[index%2 != 0]  # == [1 3 5 ... ]

input_train = []
input_test = []
correct_train = []
correct_test = []


for i in range(n_data):
    if i%2==0:
        input_train.append(input_data[i])
        correct_train.append(correct_data[i])
for i in range(n_data):
    if i%2!=0:
        input_test.append(input_data[i])
        correct_test.append(correct_data[i])
input_train = np.array(input_train)
input_test = np.array(input_test)
correct_train = np.array(correct_train)
correct_test = np.array(correct_test)

n_train = input_train.shape[0] #訓練用データのサンプル数
n_test = input_test.shape[0]    #テスト用データのサンプル数

#NNの定義
n_in = 8
n_mid = 50
n_out = clusta_Num

wb_width = 0.1
eta = 0.01
epoch = 5000
batch_size = 8
interval = 200


# -- 各層の継承元 --
class BaseLayer:
    def __init__(self, n_upper, n):
        self.w = wb_width * np.random.randn(n_upper, n)  # 重み（行列）
        self.b = wb_width * np.random.randn(n)  # バイアス（ベクトル）

        self.h_w = np.zeros(( n_upper, n)) + 1e-8
        self.h_b = np.zeros(n) + 1e-8
        
    def update(self, eta):      
        self.h_w += self.grad_w * self.grad_w
        self.w -= eta / np.sqrt(self.h_w) * self.grad_w
        
        self.h_b += self.grad_b * self.grad_b
        self.b -= eta / np.sqrt(self.h_b) * self.grad_b

# -- 中間層 --
class MiddleLayer(BaseLayer):
    def forward(self, x):
        self.x = x
        self.u = np.dot(x, self.w) + self.b
        self.y = np.where(self.u <= 0, 0, self.u)  # ReLU
    
    def backward(self, grad_y):
        delta = grad_y * np.where(self.u <= 0, 0, 1)  # ReLUの微分

        self.grad_w = np.dot(self.x.T, delta)
        self.grad_b = np.sum(delta, axis=0)
        
        self.grad_x = np.dot(delta, self.w.T) 

# -- 出力層 --
class OutputLayer(BaseLayer):     
    def forward(self, x):
        self.x = x
        u = np.dot(x, self.w) + self.b
        self.y = np.exp(u)/np.sum(np.exp(u), axis=1, keepdims=True)  # ソフトマックス関数

    def backward(self, t):
        delta = self.y - t
        
        self.grad_w = np.dot(self.x.T, delta)
        self.grad_b = np.sum(delta, axis=0)
        
        self.grad_x = np.dot(delta, self.w.T) 
        
# -- ドロップアプト --
class Dropout:
    def __init__(self, dropout_ratio):
        self.dropout_ratio = dropout_ratio  # ニューロンを無効にする確率

    def forward(self, x, is_train):  # is_train: 学習時はTrue
        if is_train:
            rand = np.random.rand(*x.shape)  # 入力と同じ形状の乱数の行列
            self.dropout = np.where(rand > self.dropout_ratio, 1, 0)  # 1:有効 0:無効
            self.y = x * self.dropout  # ニューロンをランダムに無効化
        else:
            self.y = (1-self.dropout_ratio)*x  # テスト時は出力を下げる
        
    def backward(self, grad_y):
        self.grad_x = grad_y * self.dropout  # 無効なニューロンでは逆伝播しない


# -- 各層の初期化 --
ml_1 = MiddleLayer(n_in, n_mid)
dp_1 = Dropout(0.5)
ml_2 = MiddleLayer(n_mid, n_mid)
dp_2 = Dropout(0.5)
ol = OutputLayer(n_mid, n_out)

# -- 順伝播 --
def fp(x, is_train):
    ml_1.forward(x)
    dp_1.forward(ml_1.y, is_train)
    ml_2.forward(dp_1.y)
    dp_2.forward(ml_2.y, is_train)
    ol.forward(dp_2.y)

# -- 逆伝播 --
def bp(t):
    ol.backward(t)
    dp_2.backward(ol.grad_x)
    ml_2.backward(dp_2.grad_x)
    dp_1.backward(ml_2.grad_x)
    ml_1.backward(dp_1.grad_x)

# -- 重みとバイアスの更新 --
def uppdate_wb():
    ml_1.update(eta)
    ml_2.update(eta)
    ol.update(eta)

# -- 誤差を計算 --
def get_error(t, batch_size):
    return -np.sum(t * np.log(ol.y + 1e-7)) / batch_size  # 交差エントロピー誤差


# -- 誤差の記録用 --
train_error_x = []
train_error_y = []
test_error_x = []
test_error_y = []

# -- 学習と経過の記録 --
n_batch = n_train // batch_size  # 1エポックあたりのバッチ数
for i in range(epoch):

    # -- 誤差の計測 --  
    fp(input_train, False)
    error_train = get_error(correct_train, n_train)
    fp(input_test, False)
    error_test = get_error(correct_test, n_test)
    
    # -- 誤差の記録 -- 
    test_error_x.append(i)
    test_error_y.append(error_test) 
    train_error_x.append(i)
    train_error_y.append(error_train) 
    
    # -- 経過の表示 -- 
    if i%interval == 0:
        print("Epoch:" + str(i) + "/" + str(epoch),
              "Error_train:" + str(error_train),
              "Error_test:" + str(error_test))

    # -- 学習 -- 
    index_random = np.arange(n_train)
    np.random.shuffle(index_random)  # インデックスをシャッフルする
    for j in range(n_batch):
        
        # ミニバッチを取り出す
        mb_index = index_random[j*batch_size : (j+1)*batch_size]
        x = input_train[mb_index, :]
        t = correct_train[mb_index, :]
        
        # 順伝播と逆伝播
        fp(x, True)
        bp(t)
        
        # 重みとバイアスの更新
        uppdate_wb() 


#誤差の記録をグラフ表示
plt.plot(train_error_x, train_error_y, label="Train")
plt.plot(test_error_x, test_error_y, label="Test")
plt.legend()
plt.xlabel("Epochs")
plt.ylabel("Error")


#学習した重みを保存
w_ml_1 = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/NN-result/w_ml_1.csv'
b_ml_1 = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/NN-result/b_ml_1.csv'
w_ml_2 = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/NN-result/w_ml_2.csv'
b_ml_2 = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/NN-result/b_ml_2.csv'
w_ol = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/NN-result/w_ol.csv'
b_ol = '/home/naoyamada/catkin_ws3/src/hsr_handing/script/csv/NN-result/b_ol.csv'
        
with open(w_ml_1, 'w') as f:
    writer = csv.writer(f,lineterminator='\n')
    writer.writerows(ml_1.w)
with open(b_ml_1, 'w') as f:
    writer = csv.writer(f,lineterminator='\n')
    writer.writerow(ml_1.b)
with open(w_ml_2, 'w') as f:
    writer = csv.writer(f,lineterminator='\n')
    writer.writerows(ml_2.w)
with open(b_ml_2, 'w') as f:
    writer = csv.writer(f,lineterminator='\n')
    writer.writerow(ml_2.b)
with open(w_ol, 'w') as f:
    writer = csv.writer(f,lineterminator='\n')
    writer.writerows(ol.w)
with open(b_ol, 'w') as f:
    writer = csv.writer(f,lineterminator='\n')
    writer.writerow(ol.b)



#正解率の計算
fp(input_train,False)
count_train = np.sum(np.argmax(ol.y,axis=1) == np.argmax(correct_train, axis=1))

fp(input_test,False)
count_test = np.sum(np.argmax(ol.y,axis=1) == np.argmax(correct_test, axis=1))

print('学習データでの正解数---{}/{}'.format(count_train,n_train))
print('テストデータでの正解数---{}/{}'.format(count_test,n_test))

print("Accuracy Train:" + str(float(count_train)/n_train*100) + "%",
      "Accuracy Test:" + str(float(count_test)/n_test*100) + "%")

'''
sit
x =[ [1.4826510291109343,1.818477500943415,1.8748481316893146,2.065432982838766,111.95567616901906,123.12558342357593,68.0139690383266,49.553481819952395],[1.473060974833972,1.7992108787059087,1.8624299963479765,2.0520097726755275,111.0570542819928,122.5891255457401,68.04677248730805,49.21072237686609],
[1.4820535329760747,1.8292098476856231,1.9224235315026277,2.118062202865893,110.76920742134564,122.38592371817674,73.60985510743673,55.355326841564676],
[1.4132536996406047,1.8206906106856768,1.999041843613238,2.216730169235688,109.23094677179637,121.52374498170934,86.76112442185311,73.79797160855479],
[1.40814806635348,1.8050887097240094,1.974891069404127,2.1926468014185327,107.56821957358346,121.14477857545427,84.62417004926345,73.09686491571037],
[1.4148149798685243,1.8124201168440144,1.9889332020045747,2.198179803155237,108.1132506025564,120.80105142350692,85.20788957065098,72.25457336594538],
[1.4138178669737318,1.8223624079541614,1.9898013433976605,2.200731063708508,108.47259377797201,122.38115215141534,85.72419484973341,72.07677648450266],
[1.4207577237978837,1.8230156181349477,2.0000090120186207,2.21975982399896,108.57985119720755,121.25684211275146,85.7488332458026,71.22176677157152],
[1.4137502071442374,1.822412401516073,1.9847337268439789,2.205468643419032,108.34799445403775,121.77903907595692,85.72484132181529,72.08139673839554],
[1.4064291058467375,1.8118263423691565,1.9796105374740285,2.1931794171984893,108.55595926121117,121.65188708682717,85.93497680723092,72.31162996331261],
[1.398075213531517,1.7938159860823173,1.9629354539995172,2.1799742098851076,108.25370038885518,120.68860475815166,85.42141397979906,73.88098386379865],
[1.4192312865896066,1.8224669042063122,1.997374078872257,2.2140044773286336,108.45288640204762,120.9052043571526,85.53491477788396,72.59516888460095],
[1.40371437619038,1.8188581542476512,1.9878201446054624,2.2062347087288763,107.01641712429551,121.96504892104025,86.33432402862077,72.88418466988443],
[1.412132284182343,1.819012538894088,1.9827928610179917,2.1970338128635456,109.12684458383049,122.28808463528318,86.3234243218899,72.81118605272066],
[1.4300261500175029,1.8343038904896183,2.0054643655213984,2.2277424176412484,107.57512489745056,121.23798262738646,84.73149022944813,71.80280472209964],
[1.4079251378223712,1.8116252141630276,1.969549539376706,2.1883499108220246,108.26937680856787,121.7458028638415,85.17787486375612,73.0879380647984],
[1.3989061003891725,1.8047371602789155,1.977580243232673,2.1925106252533917,106.56267906640653,120.7988141616542,85.18133043938379,74.45178543177144],
[1.4167284660962272,1.8230175304967373,1.9820586498295079,2.206083505248998,109.14053195951007,122.10118058078967,85.13802826228697,71.48190231781747],
[1.4074700380385956,1.8113007493323459,1.9786629835012133,2.191996338055988,108.08424574523298,121.50834077592575,85.16203617594367,73.11807912932427],
[1.473663531692784,1.825854587593065,1.9252879116588408,2.124339218844749,109.70807314041065,121.52540221302067,73.50494689335304,55.86741731753713],
[1.4889633824524182,1.8482107485335875,1.9355798390015504,2.133632129331212,110.76587755356036,123.01999231365585,73.54418147674818,55.49667556475119],
[1.482538914950084,1.8422509829529075,1.9338839906335872,2.1315402069312084,110.78078049451508,123.00907167192196,74.31334474318369,56.270590432734835],
[1.480212857024519,1.8297155287401101,1.929632664369653,2.121089907268567,110.11485097835393,122.50514149289307,73.48347386584456,55.062272965100135]]
'''

'''
#stand
x=[[1.6686996145586197,1.7459613189844772,2.2070178965341563,2.411035156876677,165.73910541713977,179.3275644437635,167.2259426863563,179.40942313831414],
[1.5458685753636041,1.6023951691164455,1.9328776121655342,2.1619481383195605,154.22668278774952,173.19892520414743,178.78016644478856,172.31474955719867],
[1.5814475289406091,1.6501123451807256,2.0860355310642373,2.2114463742760173,179.74496899994648,176.17630023693465,163.40612208882015,177.67175230365018],
[1.583680059553869,1.6639497115424375,2.0905681549256614,2.224684404924402,173.78589600325597,167.92428124372336,161.55419194523233,178.6916660175432],
[1.5852870949239029,1.7033390393339474,1.9892161858613437,2.2866738695920485,174.92433427358674,174.2103625454672,179.00663586936594,170.77101638192312],
[1.6431413681100682,1.6912342072194422,2.077282947482971,2.3577366643910946,173.326404549556,179.31226720371603,176.28298841907542,175.568858660025],
[1.5829453552418102,1.699960492941247,2.0491551004606983,2.310650867861995,174.60472189280003,176.56457540531215,177.41152267629985,164.89470834189268],
[1.6161792252200633,1.6886397794279604,2.110367279424982,2.281231832795425,160.01631283980865,169.95685584569367,166.7267765639865,176.90414335722562],
[1.5950051769037823,1.6571772391449795,2.0983079110820673,2.245442806653597,173.756876179816,172.38085016855183,173.3986660899944,165.93355853434142],
[1.6613275020158529,1.7368127880452977,2.2002434611945,2.3795175957299683,171.4855113981416,170.08628031926514,175.02321854674193,167.72151038489665],
[1.6152943186742676,1.6490921011926996,2.077959234111904,2.2035467882020114,172.28073183211214,177.092534551853,171.61219539043884,164.36933847932355],
[1.6707994269728943,1.6817167091463106,2.1713605399023677,2.333163639144304,167.33054884326702,169.15548177679023,165.03568658659412,175.6245334666088],
[1.5433961416851028,1.6268029038627976,1.9904905773907626,2.1706122199910616,179.31380122823072,176.48712234287888,176.42763421248918,165.06900608417277],
[1.6723737314428944,1.7461279957145026,2.2447826300803353,2.4211161366449856,167.59134483522988,176.22568701448688,174.96421665178616,171.92986738610892],
[1.6017795765909761,1.6291401176879656,2.0100886321226628,2.178443096212929,176.3444643534854,178.8553702670108,169.0988358414253,164.16279063124216],
[1.6708924540449737,1.6795712166954708,2.1141545502437635,2.2650441493291735,173.28726796408623,178.5717626511774,172.1177804276988,165.57193885888722],
[1.55422082605397,1.6756357175710617,2.0696416987033204,2.2341813146627505,171.62121378602444,179.22006251137378,165.11607598606838,179.6481029997768],
[1.5768827734532493,1.6202437500368578,2.021549863040199,2.205680024862307,173.30606505348646,179.13844473302294,175.37630797317115,166.13096752369938],
[1.6161412282406356,1.6928228860183907,2.13086839805642,2.287610776863894,166.16432751350212,170.6865930023543,176.97469089576856,166.27123534961007],
[1.5581688216735166,1.6245623885850131,2.027499177766399,2.1843331214364254,170.95606869347634,179.45914421360538,174.56836412042992,165.34555893996162],
[1.6173475999831957,1.650903354073371,2.1313199232501825,2.251630745587203,175.53639100971782,178.83023521585767,165.21893842063025,171.28701413124875],
[1.5743139003415203,1.6377656824996234,2.0199445446980637,2.210082807607755,170.73301798393123,176.56773417315793,169.82537569716845,178.58783454670726],
[1.6221162985178628,1.6708962541125394,2.096476892543194,2.283027557500384,171.09453354064323,179.5549335378825,176.5427992411981,172.72478378698904]]
'''


#cross
x=[[1.5821608957483817,1.2933820547979153,1.5950045156956538,1.556192727100305,159.9026582822911,170.1635584916682,106.60087468772699,82.8558923349913],
[1.5626881319762478,1.2776131953565821,1.5760586564944425,1.5360286099502118,160.10534556549626,167.7373612568519,105.60617952542657,82.28188245874348],
[1.5744071578346845,1.2869140431941506,1.5785883596837345,1.5352711753969739,161.38741306175564,170.15139476526832,104.88546327425632,83.70244757550658],
[1.5804846353857835,1.3060843137870723,1.5502226813622861,1.5710553811405723,157.62453564935973,169.621952216752,105.22839359047788,83.596663939435],
[1.609523050973757,1.291419917094186,1.5783659895744164,1.5545834128607325,158.04239795621504,169.86627020698174,107.3483217123019,82.67409183752684],
[1.6682298697016584,1.2367645056164938,1.547972005529541,1.5479050218323662,152.90984646936715,179.28499256054695,117.51350796380927,77.43044691988108],
[1.7199790949674638,1.210510066860739,1.625979170449082,1.6142318484188798,151.12711941383753,155.1711782895273,128.78916625783444,77.7468311023295],
[1.7035364789619032,1.2070777558639025,1.613499068982052,1.4088697322978412,146.94058320013153,83.73481388890036,149.33239434570697,82.377370633119],
[1.7699865800973473,1.241857853293976,1.6603624933983065,1.4532251712457247,146.0427022164264,69.81643968555676,164.941072976186,81.93661152808342],
[1.7710533934319919,1.2296199334696851,1.6437106695071182,1.438892402596142,147.65609838584106,69.53353077792997,165.41443545359823,82.73054781573798],
[1.7544631952576477,1.2108796283802359,1.634685423648531,1.4348767232976538,147.6964301345023,75.65242221411853,157.5161881263988,82.07759712506967],
[1.6957056901654022,1.2169490520788906,1.6067210562151746,1.4260669031867093,146.93660710383267,40.00178357409709,156.35053898695412,83.57877956290436],
[1.618939414454705,1.2400401970439532,1.5895833160520423,1.6074669839730689,144.77397325132435,65.74714369599019,106.45609825391094,86.7344474384911],
[1.6159806081632673,1.2368038160319856,1.5811819272132273,1.6046036685309453,145.1892002982148,64.06788313051413,106.71185166017347,86.80374866755412],
[1.5977347901712278,1.2399776844355779,1.5863324361412838,1.62683149616416,145.19445689595315,63.242642345002196,106.14994738430194,88.68312810466975],
[1.6070201613691097,1.2343814785639127,1.5893703575613276,1.630552141461109,145.21982372182273,61.934892892618905,107.70898422993741,87.92538493233452],
[1.626910272255181,1.2558159376067402,1.6096119774517377,1.6393938821417862,145.32944032498068,57.98515820441634,108.29373411979446,87.1430250227471],
[1.6321009421858965,1.2593658136569585,1.6147324166058006,1.656571643059095,145.0669384484704,63.3483828872989,107.74889063680392,87.76877996283153],
[1.5982291275416491,1.2360831687065517,1.5810142933650015,1.5873054869897387,145.9632010705616,69.40336530731912,106.59192431787378,88.58539235491175],
[1.5007558031984565,1.2151053197303445,1.5250571623592817,1.6438336408364522,144.42114696969264,67.28110808704861,93.93122466262392,92.08563853018512],
[1.4851159381030539,1.244604874915436,1.5137109172311107,1.7018781112348569,143.3821951119947,66.79684470760822,91.64076412476295,93.41205992539503],
[1.488210200797069,1.2619375320982338,1.5173882979392919,1.609095264205776,144.48676738701405,72.14794398374477,92.29839755797782,93.3243442430317],
[1.4934062341660348,1.255610687300784,1.5235247850477045,1.6262522331036122,143.6542116971305,69.17368824959692,92.71271725986429,92.73588273479504],
[1.4822877298624944,1.2473261418128563,1.5159597899508808,1.634986034359727,143.66890800959862,71.44857119611265,90.9105822593662,92.84492449997747],
[1.490666796792516,1.2583999051042274,1.5132238087387107,1.6563872178532237,144.30066262003314,68.74078476600698,92.05816915606982,92.14466387421493],
[1.465075029865737,1.2329592744491076,1.4983415759582264,1.6329103724630647,143.51347784118462,70.47139156691037,89.4311754031237,93.59002687911556]]



fp(x,False)
print(np.argmax(ol.y,axis=1))


plt.show()


    
        
